import BaseModel from '../../core/BaseModel.js';
import FirebaseDatabase from '../services/FirebaseDatabase.js';
import Logger from '../utils/Logger.js';
import GetCollectionModelMap from './GetCollectionModelMap.js';

const {ModelName} = {
    collection: '{ModelName}s',
    {schema},
    
    async findById(id) {
        let data = await FirebaseDatabase.findById(id);
        if (data) {
            data = await BaseModel.transformDataAfterFetch(data, {ModelName}.schema, GetCollectionModelMap());
        }
        return data;
    },

    async findAll() {
        let data = await FirebaseDatabase.findAll({ModelName}.collection);
        if (data) {
            data = await Promise.all(
                data.map(item => BaseModel.transformDataAfterFetch(item, {ModelName}.schema, GetCollectionModelMap()))
            );
        }
        return data;
    },

    async save(id, data) {
        BaseModel.validateData(data, {ModelName}.schema);
        const transformedData = BaseModel.transformDataBeforeSave(data, {ModelName}.schema);
        return await FirebaseDatabase.save({ModelName}.collection, id, transformedData);
    },

    async delete(id) {
        return await FirebaseDatabase.delete(id);
    },

    async getOptionsKeyValue() {
        const items = await {ModelName}Model.findAll();
        return items.map(item => ({ id: item.id, display: item.id }));
    },

    validateForm(data) {
        try {
            BaseModel.validateData(data, {ModelName}.schema);
            return null; 
        } catch (errors) {
            return errors; 
        }
    },

    async createDefaultInstance(){
        return BaseModel.createDefaultInstance({ModelName}.schema);
    }
};

export default {ModelName};
